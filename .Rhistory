hist(AIRS_05_2003$co2avgret)
hist(AIRS_05_2003$co2avgret, 25)
hist(AIRS_05_2003$co2std, 25)
install.packages("gldrm")
#  Copyright (C) 2012 Yohan Chalabi
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 or 3 of
#  the License (at your option).
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  A copy of the GNU General Public License is available at
#  http://www.r-project.org/Licenses/
fitgl <- function(x, start, inc = FALSE, na.rm = FALSE,
method = c("mle", "hist", "prob", "quant", "shape"), ...) {
method <- match.arg(method)
if (identical(method, "shape")) inc <- FALSE
if (na.rm) x <- na.omit(x)
if (any(is.na(x)))
stop("NAs are not allowed. You might want to use 'na.rm = TRUE'")
med <- median(x)
iqr <- IQR(x)
# if the location and scale parameters are not included in the
# optimization, we then scale the dataset to have med = 0 and iqr = 1.
if (!inc)
x <- (x - med) / iqr
# extract additional arguments that should be passed to nlminb
dots <- list(...)
nm <- c('eval.max', 'iter.max', 'trace', 'abs.tol',
'rel.tol', 'x.tol', 'step.min')
control <- dots[names(dots) %in% nm]
# and keep the other additional arguments for the objective function
obj_control <- dots[!(names(dots) %in% nm)]
obj <-
switch(method,
mle = {
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
ans <-  -sum(log(dgl(x, par, maxit=1e4L)))
if (is.na(ans)) Inf else ans
}
},
hist = {
hist_args <- c(list(x = x, plot = FALSE), obj_control)
hh <- do.call(hist, hist_args)
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
den <-  dgl(hh$mids, par, maxit=1e4L)
if (any(is.na(den))) Inf else mean((hh$density - den)^2)
}
},
prob = {
len <- length(x)
x <- sort(x)
p <- (1:len)/(len + 1)
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
ans <- mean((p - pgl(x, par, maxit = 1e4L))^2)
if (is.nan(ans)) Inf else ans
}
},
quant = {
len <-
if (is.null(obj_control$len))
1000L
else
obj_control$len
p <- ppoints(len)
qs <- as.vector(quantile(x, p))
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
q <- qgl(p, par)
if (any(is.na(q))) Inf else mean((q - qs)^2)
}
},
shape = {
S <- function(p, par) qgl(p, par)
glskew <- function(par) {
p <- (1:7)/8
(S(p[5], par) - S(p[3], par)) /
(S(p[7], par) - S(p[1], par))
}
glkurt <- function(par) {
p <- (1:7)/8
(S(p[7], par) - S(p[5], par) +
S(p[3], par) - S(p[1], par)) /
(S(p[6], par) - S(p[2], par))
}
q <- as.vector(quantile(x, (1:7)/8))
# med <- q[4]
# iqr <- q[6] - q[2]
skew <- (q[5] - q[3]) / (q[7] - q[1])
kurt <- (q[7] - q[5] + q[3] - q[1]) / (q[6] - q[2])
function(par) {
par <- c(0, 1, par)
#-> to ensure that fitted parameters are
#-> feasible for all points x
if (any(is.na(pgl(x, par, maxit = 1e4)))) return(Inf)
sample <- c(skew, kurt)
theoretical <- c(glskew(par), glkurt(par))
ans <- sum((sample - theoretical)^2)
if (is.na(ans)) Inf else ans
}
})
small <- 1e-4
if (missing(start))
start <- c(med, iqr , 0, .6)
lower <- c(-Inf, small, -1 + small, small)
upper <- c(Inf, Inf, 1 - small, 1 - small)
ans <- nlminb(start[c(rep(inc, 2), TRUE, TRUE)],
obj,
lower = lower[c(rep(inc, 2), TRUE, TRUE)],
upper = upper[c(rep(inc, 2), TRUE, TRUE)],
control = control)
# When location and scale where not included in the optimization,
# add their sample estimates to the fitted shape parameters
if (!inc)
ans$par <- c(med, iqr, ans$par)
names(ans$par) <- c("med", "iqr", "chi", "xi")
ans
}
a = rnorm(1000, 1, 2)
fitgl(a)
library("GLDEX", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
fitgl(a)
fitgl(a)
#  Copyright (C) 2012 Yohan Chalabi
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 or 3 of
#  the License (at your option).
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  A copy of the GNU General Public License is available at
#  http://www.r-project.org/Licenses/
fitgl <- function(x, start, inc = FALSE, na.rm = FALSE,
method = c("mle", "hist", "prob", "quant", "shape"), ...) {
method <- match.arg(method)
if (identical(method, "shape")) inc <- FALSE
if (na.rm) x <- na.omit(x)
if (any(is.na(x)))
stop("NAs are not allowed. You might want to use 'na.rm = TRUE'")
med <- median(x)
iqr <- IQR(x)
# if the location and scale parameters are not included in the
# optimization, we then scale the dataset to have med = 0 and iqr = 1.
if (!inc)
x <- (x - med) / iqr
# extract additional arguments that should be passed to nlminb
dots <- list(...)
nm <- c('eval.max', 'iter.max', 'trace', 'abs.tol',
'rel.tol', 'x.tol', 'step.min')
control <- dots[names(dots) %in% nm]
# and keep the other additional arguments for the objective function
obj_control <- dots[!(names(dots) %in% nm)]
obj <-
switch(method,
mle = {
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
ans <-  -sum(log(dgl(x, par,  max.iterations=1e4L)))
if (is.na(ans)) Inf else ans
}
},
hist = {
hist_args <- c(list(x = x, plot = FALSE), obj_control)
hh <- do.call(hist, hist_args)
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
den <-  dgl(hh$mids, par,  max.iterations=1e4L)
if (any(is.na(den))) Inf else mean((hh$density - den)^2)
}
},
prob = {
len <- length(x)
x <- sort(x)
p <- (1:len)/(len + 1)
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
ans <- mean((p - pgl(x, par, maxit = 1e4L))^2)
if (is.nan(ans)) Inf else ans
}
},
quant = {
len <-
if (is.null(obj_control$len))
1000L
else
obj_control$len
p <- ppoints(len)
qs <- as.vector(quantile(x, p))
function(par) {
if (any(is.na(par))) return(Inf)
if (!inc) par <- c(0, 1, par)
q <- qgl(p, par)
if (any(is.na(q))) Inf else mean((q - qs)^2)
}
},
shape = {
S <- function(p, par) qgl(p, par)
glskew <- function(par) {
p <- (1:7)/8
(S(p[5], par) - S(p[3], par)) /
(S(p[7], par) - S(p[1], par))
}
glkurt <- function(par) {
p <- (1:7)/8
(S(p[7], par) - S(p[5], par) +
S(p[3], par) - S(p[1], par)) /
(S(p[6], par) - S(p[2], par))
}
q <- as.vector(quantile(x, (1:7)/8))
# med <- q[4]
# iqr <- q[6] - q[2]
skew <- (q[5] - q[3]) / (q[7] - q[1])
kurt <- (q[7] - q[5] + q[3] - q[1]) / (q[6] - q[2])
function(par) {
par <- c(0, 1, par)
#-> to ensure that fitted parameters are
#-> feasible for all points x
if (any(is.na(pgl(x, par, maxit = 1e4)))) return(Inf)
sample <- c(skew, kurt)
theoretical <- c(glskew(par), glkurt(par))
ans <- sum((sample - theoretical)^2)
if (is.na(ans)) Inf else ans
}
})
small <- 1e-4
if (missing(start))
start <- c(med, iqr , 0, .6)
lower <- c(-Inf, small, -1 + small, small)
upper <- c(Inf, Inf, 1 - small, 1 - small)
ans <- nlminb(start[c(rep(inc, 2), TRUE, TRUE)],
obj,
lower = lower[c(rep(inc, 2), TRUE, TRUE)],
upper = upper[c(rep(inc, 2), TRUE, TRUE)],
control = control)
# When location and scale where not included in the optimization,
# add their sample estimates to the fitted shape parameters
if (!inc)
ans$par <- c(med, iqr, ans$par)
names(ans$par) <- c("med", "iqr", "chi", "xi")
ans
}
fitgl(a)
#  Copyright (C) 2012 Yohan Chalabi
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 or 3 of
#  the License (at your option).
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  A copy of the GNU General Public License is available at
#  http://www.r-project.org/Licenses/
glshapeplot <- function(x, method, moments = 1:4, ...) {
#######
# plot
plot(c(-1, 1), c(0, 1), type = "n",  ann = FALSE)
title(main = "GLD Shape Plot", xlab = expression(chi),
ylab = expression(xi))
#######
# add lines of moments
momentLine <- function(k, lty = 2, col = "grey") {
small <- 1e-4
# First part
chi <- seq( -1 + small, - 2 * sqrt(1 / (4 + k^2)), len = 100)
b <- chi / (2 * sqrt(1 - chi^2))
xi <- .5 - sqrt( (1 + 2*b*k + b^2*k^2) / (4 + 8*b*k + k^2 + 4*b^2*k^2) )
lines(c(-1, chi), c(0, xi), lty = lty, lwd = 2, col = col)
# second part
chi <- seq(small - 2 * sqrt(1 / (4 + k^2)), 0, len = 100)
b <- chi / (2 * sqrt(1 - chi^2))
xi <- .5 + sqrt( (1 + 2*b*k + b^2*k^2) / (4 + 8*b*k + k^2 + 4*b^2*k^2) )
lines(chi, xi, lty = lty, lwd = 2, col = col)
# third part
chi <- seq(small, 2 * sqrt(1 / (4 + k^2)) - small, len = 100)
b <- chi / (2 * sqrt(1 - chi^2))
xi <- .5 + sqrt( (1 - 2*b*k + b^2*k^2) / (4 - 8*b*k + k^2 + 4*b^2*k^2) )
lines(chi, xi, lty = lty, lwd = 2, col = col)
# fourth part
chi <- seq(2 * sqrt(1 / (4 + k^2)), 1 - small)
b <- chi / (2 * sqrt(1 - chi^2))
xi <- .5 - sqrt( (1 - 2*b*k + b^2*k^2) / (4 - 8*b*k + k^2 + 4*b^2*k^2) )
lines(c(chi, 1), c(xi, 0), lty = lty, lwd = 2, col = col)
}
if (!is.null(moments))
sapply(moments, function(m) momentLine(m))
ans <- NULL
if (!is.null(x)) {
if (!is.matrix(x)) x <- as.matrix(x)
nc <- ncol(x)
ans <- vector("list", nc)
for (j in seq.int(nc)) {
ans[[j]] <- fitgl(x[, j], ...)
points(ans[[j]]$par[3], ans[[j]]$par[4], pch = 19, cex = .8)
}
}
invisible(ans)
}
glshapeplot(a)
rgl <- function(n, med = 0, iqr = 1, chi = 0, xi = 0.6)
.Call("gldist_rgl", n, med, iqr, chi, xi)
rgl(1000)
install.packages("gldist")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install_git("https://github.com/cran/gldist")
library(gldist)
rgl(1000)
r = fitgl(a)
remove(fitgl())
remove(fitgl)
library(gldist)
r = fitgl(a)
r$par
resultado = rgl(1000, r$par)
hist(resultado)
hist(resultado, 25)
density(resultado)
plot(density(resultado))
hist(resultado, 25)
lines(density(resultado))
points(density(resultado))
plot(density(resultado))
glshapeplot(a)
a = rnorm(1000, 1, 2)
glshapeplot(a)
a = rexp(1000, 1)
glshapeplot(a)
a = runif(1000)
glshapeplot(a)
library("GLDEX", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
result = runif.sobol(1000, 2, 3)
result
hist(result)
result
library("GLDEX", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("uqms", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
setwd("~/PhD/thesis_phd/datasets")
theRes = readRDS('theRes.rds')
library("stringr")
for(i in 1:250){
a1 = str_c("theRes[",i,",1]$result.",i)
a2 = str_c("theRes[",i,",2]$result.",i)
temp1 = eval(parse(text = a1))
temp2 = eval(parse(text = a2))
for(j in 1:501){
lambdas[i,j,] = temp1[j,]
statistics[i,j,] = temp2[j,]
}
}
library("stringr")
theRes = readRDS('theRes.rds')
# Initialize de variables
lambdas = array(0, dim = c(250, 501, 4))
statistics = array(0, dim = c(250, 501, 4))
for(i in 1:250){
a1 = str_c("theRes[",i,",1]$result.",i)
a2 = str_c("theRes[",i,",2]$result.",i)
temp1 = eval(parse(text = a1))
temp2 = eval(parse(text = a2))
for(j in 1:501){
lambdas[i,j,] = temp1[j,]
statistics[i,j,] = temp2[j,]
}
}
theRes = readRDS('theRes.rds')
for(i in 1:250){
a1 = str_c("theRes[",i,",1]$result.",i)
a2 = str_c("theRes[",i,",2]$result.",i)
temp1 = eval(parse(text = a1))
temp2 = eval(parse(text = a2))
for(j in 1:501){
lambdas[i,j,] = temp1[j,]
statistics[i,j,] = temp2[j,]
}
}
lambdas
image_display(lambdas[,,1])
image_display(lambdas[,,2])
image_display(lambdas[,,3])
image_display(lambdas[,,4])
source('~/PhD/thesis_phd/r_codes/clustering.R')
gldClustersL3L4(clustes, x)
gldClustersL3L4(clusters, x)
plot.gld.by.cluster(1, 60)
library("gldist", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
plot.gld.by.cluster(1, 60)
plot.gld.by.cluster(2, 60)
plot.gld.by.cluster(3, 60)
detach("package:gldist", unload=TRUE)
detach("package:GLDEX", unload=TRUE)
library("GLDEX", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
plot.gld.by.cluster(3, 60)
plot.gld.by.cluster(1, 60)
source('~/PhD/thesis_phd/r_codes/plot.gld.by.cluster.R')
plot.gld.by.cluster(1, 60)
clusters
image_display(clusters)
image_display(lambda1)
image_display(lambda2)
image_display(lambda3)
image_display(lambda4)
plot(x)
gldClustersL3L4(clusters, x)
remove(rgl)
detach("package:GLDEX", unload=TRUE)
library("GLDEX", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
plot.gld.by.cluster(1, 60)
plot.gld.by.cluster(2, 60)
plot.gld.by.cluster(3, 60)
plot.gld.by.cluster(4, 60)
plot.gld.by.cluster(5, 60)
plot.gld.by.cluster(6, 60)
plot.gld.by.cluster(7, 60)
plot.gld.by.cluster(8, 60)
plot.gld.by.cluster(9, 60)
plot.gld.by.cluster(10, 60)
x
cl = gldClustering(lambdas, 10)
gldClustersL3L4(cl$clusters, cl$x)
clusters = cl$clusters
x = cl$x
plot.gld.by.cluster(1, 60)
plot.gld.by.cluster(2, 60)
plot.gld.by.cluster(3, 60)
plot.gld.by.cluster(4, 60)
plot.gld.by.cluster(5, 60)
plot.gld.by.cluster(6, 60)
plot.gld.by.cluster(7, 60)
plot.gld.by.cluster(8, 60)
plot.gld.by.cluster(9, 60)
plot.gld.by.cluster(10, 60)
library(latex2exp)
plot(lambda3, lambda4, type = "n", xlab = TeX('$\\lambda_{3}'), ylab = TeX('$\\lambda_{4}'), main = TeX('Clusters in $\\lambda_{3}-\\lambda_{4}'))  # setting up coord. system
no_clusters = max(clusters)
plot.clusters.l3l4(1, 1)
plot.clusters.l3l4(2, 2)
plot.clusters.l3l4(3, 3)
plot.clusters.l3l4(4, 4)
plot.clusters.l3l4(5, 5)
plot.clusters.l3l4(6, 6)
plot.clusters.l3l4(7, 7)
plot.clusters.l3l4(8, 8)
plot.clusters.l3l4(9, 9)
plot.clusters.l3l4(10, 10)
plot.gld.by.cluster(10, 60)
gldClustersL3L4(clusters, x)
lambdas
lambdasJi = readRDS('lambdasJi.rds')
lambdasJi
lambdasJi == lambdas
lambda1 = lambdasJi[,,1]
lambda2 = lambdasJi[,,2]
lambda3 = lambdasJi[,,3]
lambda4 = lambdasJi[,,4]
lambdas34 = array(0, dim = c(125250, 6))
x = array(0, dim = c(125250, 2))
count = 0;
for(i in 1:250){
for(j in 1:501){
count = count + 1;
print(count)
lambdas34[count,1] = i;
lambdas34[count,2] = j;
lambdas34[count,3] = lambda1[i, j];
lambdas34[count,4] = lambda2[i, j];
lambdas34[count,5] = lambda3[i, j];
lambdas34[count,6] = lambda4[i, j];
#x[count,1] = lambda1[i, j];
#x[count,1] = lambda2[i, j];
x[count,1] = lambda3[i, j];
x[count,2] = lambda4[i, j];
}
}
cl <- kmeans(x, 10)
#cl <- dbscan(x, eps = 0.5)
clusters = array(0, dim = c(250, 501))
for(k in 1:125250){
clusters[lambdas34[k,1], lambdas34[k,2]] = cl$cluster[k]
}
image_display(clusters)
gldClustersL3L4(clusters, x)
x
cl = gldClustering(lambdas, 10)
cl = gldClustering(lambdasJi, 10)
clusters = cl$clusters
x = cl$x
gldClustersL3L4(clusters, x)
plot(cl$clusters$cluster, main = "Cluster number by dataset Index", ylab = "Cluster Number", col= cl$clusters$cluster, type = 'o')
plot(cl$cl$cluster, main = "Cluster number by dataset Index", ylab = "Cluster Number", col= cl$cl$cluster, type = 'o')
